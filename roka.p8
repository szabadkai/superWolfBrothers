pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
snd=
{
	jump=24,
	pickup=23,
	death=25
}

--music tracks
mus=
{
	0
}
goal={}
dead=false
win=false
waiting = false
water={}
function trigger_death()
	cls(0)
	print("you are dead", 30, 40)
	print("press 'c' to restart", 30, 60)
	sfx(snd.death)
	waiting = true
end

function trigger_win()
	cls(0)
	print("you won", 30, 40)
	print("score: "..p1.coins, 30, 60)

	print("press 'c' to restart", 30, 100)
	waiting=true
end

--point to box intersection.
function intersects_point_box(px,py,x,y,w,h)
	if flr(px)>=flr(x) and flr(px)<flr(x+w) and
	flr(py)>=flr(y) and flr(py)<flr(y+h) then
		return true
	else
		return false
	end
end

--box to box intersection
function intersects_box_box(
	x1,y1,
	w1,h1,
	x2,y2,
	w2,h2)

	local xd=x1-x2
	local xs=w1*0.5+w2*0.5
	if abs(xd)>=xs then return false end

	local yd=y1-y2
	local ys=h1*0.5+h2*0.5
	if abs(yd)>=ys then return false end

	return true
end

--check if pushing into side tile and resolve.
--requires self.dx,self.x,self.y, and
--assumes tile flag 0 == solid
--assumes sprite size of 8x8
function collide_side(self)

	local offset=self.w/3
	for i=-(self.w/3),(self.w/3),2 do
		--if self.dx>0 then
		if fget(mget((self.x+(offset))/8,(self.y+i)/8),0) then
			self.dx=0
			self.x=(flr(((self.x+(offset))/8))*8)-(offset)
			return true
		end
		--elseif self.dx<0 then
		if fget(mget((self.x-(offset))/8,(self.y+i)/8),0) then
			self.dx=0
			self.x=(flr((self.x-(offset))/8)*8)+8+(offset)
			return true
		end
		--	end
	end
	--didn't hit a solid tile.
	return false
end

function collide_pickups(self)
	for i=-(self.w/3),(self.w/3),2 do

		local tile=mget((self.x+i)/8,(self.y+(self.h/2))/8)
		if fget(tile, 5) then
			sfx(snd.pickup)
			mset((self.x+i)/8,(self.y+(self.h/2))/8,0)
			self.coins= self.coins +1
		elseif fget(tile, 6) then
			win=true
		end
	end
end

function collide_enemy(self)
	for k,e in pairs(enemies) do
		if intersects_box_box(
		self.x-self.w*0.45,
		self.y-self.h*0.2,
		self.w*.9,
		self.h*.9,
		e.x,e.y,e.w,e.h ) then
			if self.dy > 0 and not e.dieing then
				e:die()
				sfx(22)
				p1.dy= -5
				p1.jump_spent=false
			else
				if not e.dieing then
					dead=true
				end
			end
		end
	end
end

--check if pushing into floor tile and resolve.
--requires self.dx,self.x,self.y,self.grounded,self.airtime and
--assumes tile flag 0 or 1 == solid
function collide_floor(self)
	--only check for ground when falling.
	if self.dy<0 then
		return false
	end
	local landed=false
	--check for collision at multiple points along the bottom
	--of the sprite: left, center, and right.
	for i=-(self.w/3),(self.w/3),2 do
		local tile=mget((self.x+i)/8,(self.y+(self.h/2))/8)
		if fget(tile,0) or (fget(tile,1) and self.dy>=0) then
			self.dy=0
			self.y=(flr((self.y+(self.h/2))/8)*8)-(self.h/2)
			self.grounded=true
			self.airtime=0
			landed=true
		end
	end
	return landed
end

--check if pushing into roof tile and resolve.
--requires self.dy,self.x,self.y, and
--assumes tile flag 0 == solid
function collide_roof(self)
	--check for collision at multiple points along the top
	--of the sprite: left, center, and right.
	for i=-(self.w/3),(self.w/3),2 do
		if fget(mget((self.x+i)/8,(self.y-(self.h/2))/8),0) then
			self.dy=0
			self.y=flr((self.y-(self.h/2))/8)*8+8+(self.h/2)
			self.jump_hold_time=0
		end
	end
end

--make 2d vector
function m_vec(x,y)
	local v=
	{
		x=x,
		y=y,

		--get the length of the vector
		get_length=function(self)
			return sqrt(self.x^2+self.y^2)
		end,

		--get the normal of the vector
		get_norm=function(self)
			local l = self:get_length()
			return m_vec(self.x / l, self.y / l),l;
		end,
	}
	return v
end

--square root.
function sqr(a) return a*a end

--round to the nearest whole number.
function round(a) return flr(a+0.5) end


--utils
--------------------------------

--print string with outline.
function printo(str,startx,
	starty,col,
	col_bg)
	print(str,startx+1,starty,col_bg)
	print(str,startx-1,starty,col_bg)
	print(str,startx,starty+1,col_bg)
	print(str,startx,starty-1,col_bg)
	print(str,startx+1,starty-1,col_bg)
	print(str,startx-1,starty-1,col_bg)
	print(str,startx-1,starty+1,col_bg)
	print(str,startx+1,starty+1,col_bg)
	print(str,startx,starty,col)
end

--print string centered with
--outline.
function printc(
	str,x,y,
	col,col_bg,
	special_chars)

	local len=(#str*4)+(special_chars*3)
	local startx=x-(len/2)
	local starty=y-2
	printo(str,startx,starty,col,col_bg)
end

--objects
function m_water(x,y,tile)
	local w={
		x=x,
		y=y,
		w=8,
		h=8,
		anims=
		{
			["stand"]=
			{
				ticks=18,
				frames={tile,tile+1},
			}
		},
		curanim="stand",
		curframe=1,
		animtick=0,
		flipx=false, -- right
		tick = 0,

		update=function(self)

			self.animtick-=1
			if self.animtick<=0 then
				if self.dieing  then
					for k,v in pairs(enemies) do
						if v == self then
							enemies[k] = nil
						end
					end
				end
				self.curframe+=1
				local a=self.anims[self.curanim]
				self.animtick=a.ticks--reset timer
				if self.curframe>#a.frames then
					self.curframe=1--loop
				end
			end

		end,

		draw=function(self)
			local a=self.anims[self.curanim]
			local frame=a.frames[self.curframe]

			spr(frame,
			self.x,
			self.y,
			1,1,
			self.flipx,
			false)
		end,
		}
	return w
end
--------------------------------
-- make enemy
function m_enemy(x,y, tile)

	local e= {
		x=x,
		y=y,
		w=8,
		h=8,
		anims=
		{
			["stand"]=
			{
				ticks=18,
				frames={tile,tile+1},
			},
			["die"]={
				ticks=60,
				frames={26}
			},
		},
		curanim="stand",
		curframe=1,
		animtick=0,
		flipx=false, -- right
		tick = 0,
		dieing=false,

		move=function(self)
			if self.dieing then
				return
			end
			local xo=1
			if self.flipx then
				xo=-1
			end


			local tile=mget((self.x+5*xo)/8,((self.y+7)/8)+1)
			local tile1=mget((self.x+5*xo)/8,(self.y+7)/8)


			if self.flipx then
				self.x-=1
			else
				self.x+=1
			end
			if not (fget(tile,0) or fget(tile,1) ) or fget(tile1, 0) then
				self.flipx = not self.flipx
			end


		end,

		update=function(self)

			self.animtick-=1
			if self.animtick<=0 then
				if self.dieing  then
					for k,v in pairs(enemies) do
						if v == self then
							enemies[k] = nil
						end
					end
				end
				self.curframe+=1
				local a=self.anims[self.curanim]
				self.animtick=a.ticks--reset timer
				if self.curframe>#a.frames then
					self.curframe=1--loop
				end
			end

		end,

		draw=function(self)
			local a=self.anims[self.curanim]
			local frame=a.frames[self.curframe]

			spr(frame,
			self.x,
			self.y,
			1,1,
			self.flipx,
			false)
		end,

		die=function(self)
			self.curanim="die"
			self.dieing=true
			self.curframe=1
		end


	}
	return e
end




--make the player
function m_player(x,y)

	--todo: refactor with m_vec.
	local p=
	{
		x=x,
		y=y,

		dx=0,
		dy=0,

		w=16,
		h=16,

		max_dx=1,--max x speed
		max_dy=2,--max y speed

		jump_speed=-1.75,--jump veloclity
		acc=0.05,--acceleration
		dcc=0.8,--decceleration
		air_dcc=1,--air decceleration
		grav=0.15,
		coins = 0,
		--helper for more complex
		--button press tracking.
		--todo: generalize button index.
		jump_button=
		{
			update=function(self)
				--start with assumption
				--that not a new press.
				self.is_pressed=false
				if btn(5) then
					if not self.is_down then
						self.is_pressed=true
					end
					self.is_down=true
					self.ticks_down+=1
				else
					self.is_down=false
					self.is_pressed=false
					self.ticks_down=0
				end
			end,
			--state
			is_pressed=false,--pressed this frame
			is_down=false,--currently down
			ticks_down=0,--how long down
		},

		jump_hold_time=0,--how long jump is held
		min_jump_press=5,--min time jump can be held
		max_jump_press=15,--max time jump can be held

		jump_btn_released=true,--can we jump again?
		grounded=false,--on ground
		djump_spent=false,
		airtime=0,--time since grounded

		--animation defions.
		--use with set_anim()
		anims=
		{
			["stand"]=
			{
				ticks=18,--how long is each frame shown.
				frames={1,3},--what frames are shown.
			},
			["walk"]=
			{
				ticks=5,
				frames={33,35,37,39},
			},

			["jump_start"]=
			{
				ticks=24,
				frames={41},
			},
			["jump_up"]=
			{
				ticks=8,
				frames={43},
			},
			["fall"]=
			{
				ticks=8,
				frames={45},
			},
			["slide"]=
			{
				ticks=4,
				frames={35},
			},
		},

		curanim="walk",--currently playing animation
		curframe=1,--curent frame of animation.
		animtick=0,--ticks until next frame should show.
		flipx=false,--show sprite be flipped.

		--request new animation to play.
		set_anim=function(self,anim)
			if(anim==self.curanim)return--early out.
			local a=self.anims[anim]
			self.animtick=a.ticks--ticks count down.
			self.curanim=anim
			self.curframe=1
		end,

		--call once per tick.

		update=function(self)

			--todo: kill enemies.
			--pickups
			collide_pickups(self)
			collide_enemy(self)
			--track button presses
			local bl=btn(0) --left
			local br=btn(1) --right

			--move left/right
			if bl==true then
				self.dx-=self.acc
				br=false--handle double press
			elseif br==true then
				self.dx+=self.acc
			else
				if self.grounded then
					self.dx*=self.dcc
				else
					self.dx*=self.air_dcc
				end
			end

			--limit walk speed
			self.dx=mid(-self.max_dx,self.dx,self.max_dx)

			--move in x
			self.x+=self.dx

			--hit walls
			collide_side(self)

			--jump buttons

			self.jump_button:update()

			if self.djump_spent and self.grounded then
				self.djump_spent = false
			end

			--jump is complex.
			--we allow jump if:
			--	on ground
			--	recently on ground
			--	pressed btn right before landing
			--also, jump velocity is
			--not instant. it applies over
			--multiple frames.
			if self.jump_button.is_down then
				--is player on ground recently.
				--allow for jump right after
				--walking off ledge.

				-- if self.grounded or self.airtime<5 then
				-- 	local on_ground=true
				-- elseif not self.djump_spent then
				-- 	local on_ground = true
				-- 	self.djump_spent = true
				-- else
				-- 	local on_ground = false
				-- end

				local on_ground = (self.grounded or self.airtime < 5)

				--was btn presses recently?
				--allow for pressing right before
				--hitting ground.
				local new_jump_btn=self.jump_button.ticks_down<10
				--is player continuing a jump
				--or starting a new one?
				if (not on_ground and not self.djump_spent and self.jump_button.ticks_down==1) then
					self.djump_spent = true
					on_ground = true
				end
				if self.jump_hold_time>0 or (on_ground and new_jump_btn) then
					if(self.jump_hold_time==0)sfx(snd.jump)--new jump snd
					self.jump_hold_time+=1
					--keep applying jump velocity
					--until max jump time.
					if self.jump_hold_time<self.max_jump_press then
						self.dy=self.jump_speed--keep going up while held
					end

				end
			else
				self.jump_hold_time=0
			end

			--move in y
			self.dy+=self.grav
			self.dy=mid(-self.max_dy,self.dy,self.max_dy)
			self.y+=self.dy

			--floor

			if not collide_floor(self) then
				if self.dy < 0 then
					self:set_anim("jump_up")
				else
					self:set_anim("fall")
				end

				self.grounded=false
				self.airtime+=1

			end

			--roof
			collide_roof(self)

			--handle playing correct animation when
			--on the ground.
			if self.grounded then
				if br then
					if self.dx<0 then
						--pressing right but still moving left.
						self:set_anim("slide")
					else
						self:set_anim("walk")
					end
				elseif bl then
					if self.dx>0 then
						--pressing left but still moving right.
						self:set_anim("slide")
					else
						self:set_anim("walk")
					end
				else
					self:set_anim("stand")
				end
			end

			--flip
			if br then
				self.flipx=false
			elseif bl then
				self.flipx=true
			end

			--anim tick
			self.animtick-=1
			if self.animtick<=0 then
				self.curframe+=1
				local a=self.anims[self.curanim]
				self.animtick=a.ticks--reset timer
				if self.curframe>#a.frames then
					self.curframe=1--loop
				end
			end

		end,


		--draw the player
		draw=function(self)
			if self.x<8 then
				self.x = 8
			elseif self.x>1016 then
				self.x=1016
			end
			if self.y>128 then
				dead=true
			elseif self.y<-5 then
				self.y=-5
			end
			local a=self.anims[self.curanim]
			local frame=a.frames[self.curframe]
			spr(frame,
			self.x-(self.w/2),
			self.y-(self.h/2),
			self.w/8,self.h/8,
			self.flipx,
			false)
		end,
	}

	return p
end

--make the camera.
function m_cam(target)
	local c=
	{
		tar=target,--target to follow.
		pos=m_vec(target.x,target.y),

		--how far from center of screen target must
		--be before camera starts following.
		--allows for movement in center without camera
		--constantly moving.
		pull_threshold=16,

		--min and max positions of camera.
		--the edges of the level.
		pos_min=m_vec(64,64),
		pos_max=m_vec(960,960),

		shake_remaining=0,
		shake_force=0,

		update=function(self)

			self.shake_remaining=max(0,self.shake_remaining-1)

			--follow target outside of
			--pull range.
			if self:pull_max_x()<self.tar.x then
				self.pos.x+=min(self.tar.x-self:pull_max_x(),4)
			end
			if self:pull_min_x()>self.tar.x then
				self.pos.x+=min((self.tar.x-self:pull_min_x()),4)
			end
			if self:pull_max_y()<self.tar.y then
				self.pos.y+=min(self.tar.y-self:pull_max_y(),4)
			end
			if self:pull_min_y()>self.tar.y then
				self.pos.y+=min((self.tar.y-self:pull_min_y()),4)
			end

			--lock to edge
			if(self.pos.x<self.pos_min.x)self.pos.x=self.pos_min.x
			if(self.pos.x>self.pos_max.x)self.pos.x=self.pos_max.x
			if(self.pos.y<self.pos_min.y)self.pos.y=self.pos_min.y
			if(self.pos.y>self.pos_max.y)self.pos.y=self.pos_max.y
		end,

		cam_pos=function(self)
			--calculate camera shake.
			local shk=m_vec(0,0)
			if self.shake_remaining>0 then
				shk.x=rnd(self.shake_force)-(self.shake_force/2)
				shk.y=rnd(self.shake_force)-(self.shake_force/2)
			end
			return self.pos.x-64+shk.x,self.pos.y-64+shk.y
		end,

		pull_max_x=function(self)
			return self.pos.x+self.pull_threshold
		end,

		pull_min_x=function(self)
			return self.pos.x-self.pull_threshold
		end,

		pull_max_y=function(self)
			return self.pos.y+self.pull_threshold
		end,

		pull_min_y=function(self)
			return self.pos.y-self.pull_threshold
		end,

		shake=function(self,ticks,force)
			self.shake_remaining=ticks
			self.shake_force=force
		end
	}

	return c
end

--game flow
--------------------------------

--reset the game to its initial
--state. use this instead of
--_init()
function reset()
	ticks=0
	enemies = {}

	p1=m_player(20,40)


	p1:set_anim("walk")
	cam=m_cam(p1)
	-- music(0)
end


function move_actors()
	for x=p1.x/8-5, p1.x/8+5 do
		for y=0, 32 do
			local tile=mget(x,y)
			if fget(tile, 7) then
				mset(x,y, 0)
				add(enemies, m_enemy(x*8,y*8,tile))
			elseif fget(tile, 2) then
				mset(x,y, 0)
				add(water, m_water(x*8,y*8,tile))
			end
		end
	end
	for k,e in pairs(enemies) do
		if flr(rnd(5)) ==1 then
			e:move()
		end
	end
end
--p8 functions
--------------------------------

function _init()
	reset()
end



function _update60()
	if btn(5) and btn(4) then
		run()
	elseif( dead or win )and btn(4) then
		run()
	end

	ticks+=1
	p1:update()
	cam:update()
	for k,e in pairs(enemies) do
		e:update()
	end
	for k,e in pairs(water) do
		e:update()
	end
	move_actors()


end

function _draw()
	if waiting then
		return
	elseif dead then
		trigger_death()
	elseif win then
		trigger_win()
		return
	else

		cls(0)
		camera(cam:cam_pos())


		map(0,0,0,0,128,128)

		p1:draw()
		for k,e in pairs(enemies ) do
			e:draw()
		end
		for k,w in pairs(water ) do
			w:draw()
		end
		--hud
		camera(0,0)

		print(p1.coins ,64,4,7,0,0)
	end
end
__gfx__
00000000000000000000000000007000000000007700000077000000000000000000000000000000000000000000000000000000000000000000000000777700
00000000670000000000000000077000000000009009009009000000009f00f9009f00f9000000000000000000000000000a0000000e00000008000009a99a70
0070070067700000000000000067700000000000900999900909009000ffffff00ffffff0000000000000000000000000057a000001fe000001f8000aa7aa7a9
0007700067700000000000000667700000700700900989890909999000f8fff800f8fff80000000000000000000000000057a000001fe000001f80000a999a90
00077000d777000000700700d777700006700760900991909009898990fff2ff90fff2ff0000000000000000000000000059a0000015e0000015800000a9a900
00700700d777000006700760d77770000d7777d099999700999991900ffffff00ffff2f0000000000000000000000000000500000001000000010000000a9000
00000000277770000d7777d0277770006777777009997700099977000fffff000fffff0000000000000000000000000000000000000000000000000000000000
000000002677700067777770267770007717717709070900090740900f490f000f490f0000000000000000000000000000000000000000000000000000000000
88888888006700007717717700670000777777770000000000f7007f7700000077000000000700b0000000000000000000000000000000000070070000000000
888888880006d76d777777770006d76d6775777000f7007f00f7007fb00b00b00b000000000b00b0000000000000000000000000007007000777777000000000
8888888800007776677577700000777676777d6000f7007f00777777b00bbbb00b0b00b0070b77b00b0b000000000000000000000777777007c77c7700229000
888888880000777776777d600000777776777d6000777777007b777bb00b8b8b0b0bbbb0bb0b77b00bbb7b77000000000000000007c77c7777c77c770027a000
8888888800077777777677000007777777767700ff7b777b00777977b00bb1b0b00b8b8bb00bb7b0bbbbb700000000000000000077c77c7777755777002a9000
8888888800077766d762d70000077766d762d700f7977977ff97787fbbbbb700bbbbb1b0bbbbbbb0b00bb1b00000000000000000777557770777777000000000
888888880006d0dd066066000006d0dd06606600f77f7777f77f77f00bbb77000bbb770000bbbbb0b00b8b800000000000000000077777700777777000000000
888888880006002000606000000600200060600007790f70077797900b0707000b0730b0000b00b0b0bbbbbb0000000000000000797272707972727000000000
bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb67700000000000000000000000000000600000000000000000700000000000000070000000000000000000000000000060000000000000000110ee00
bbbbbbbb67700000000000006000000000000000670000000000000007760000000000000776000000070d006000000000070d00d77000000000000001128e00
bbbbbbbbd77700000070d000d770000000000000d770000000000000d776000000070d00d77600000067dd00d77000000067dd00d77700000000000001188800
bbbbbbbbd7770000067dd000d777000000000000d777000000000000d77700000067dd00d777000000d77700d777000000d77700277770000000000000128000
bbbbbbbb277770000d7770002777700000070d002777700000070d002777700000d77700277770000677717027777000067771702677700000070d0000010000
bbbbbbbb2677700067771700267770000067dd00267770000067dd00267770000677717026777000067777752677700006777775006700000067dd0000000000
0000000000670000677777500067000000d777000067000000d777000067000006777775006700002267777700670000726777770006d76d00d7770000000000
000000000006d76d267777700006d76d067771700006d76d067771700006d76d226777770006d76d66d677000006d76777767700000077760677717000000000
000000000000777662677000000077762677777500007776267777750007777666d677000007777676677000000077777762d000000777772677777500080000
00000000000077777667700000077777726777770006777772677777000777777667700000077777777d670000077777777700000007777772677777001e8000
0000000000077777777670000007777777767700000677767776770000077767777d670000077767d7726600000777777dd770000007776677767700001e8000
0000000000077766d762d00007777766d762d00000006776d6660000000776ddd7726600000776dd00d7700007777766d002d0000007dd00d762d00000128000
000000000006d0dd066060000706d000d6770000000006777d0000000000770077dd000000007700000007000706d00000000000000070d0d677000000010000
0000000000060020006060000006000000d7700000000dd6d00000000000077d000000000000077d0000000000060000000000000000000000d7700000000000
cccccccc44444444000bbbbbbbbbbbbb444455334444454544544555bbbbbbbb0000000000001222554400000000000c77000000d6666777d2d22d22dddddddd
cccccccc4444444400b3333333333533544454435454444445544454333333330000000000001224444400007600067cc00000c02d66667722222222dddddddd
cccccccc444444440b3345555544545445544445464455444544444453344535000000000000112444440000c7cc77cdc00cc77c22dddd67222222d2dddddddd
cccccccc44444444054665554444544444544453544544464444444455445444000000000000122454440000c7777cddccc777cd22dddd66d2222ddddddddddd
cccccccc44444444b55651544444444445445445444445454454444444444444000000000000112554440000cddccddcdddcddcd22dddd66d2d22ddddddddddd
cccccccc44444444355555544444444444444545445444444445445444554444000000000000112255440000ddd1ddc111c1cccc221111d6ddd2dddddddddddd
cccccccc44444444344511444544454454445445444544945444444444555444000000000005112445545000ccc111111111ddcd2111111ddddddddddddddddd
cccccccc444444443554545544444444444444434544444444454444454444540000000055111242545544551111dcd111111dd111111111dddddddddddddddd
4ffff7774444544454444454bbbbbbbbbbbbb0004544444533554544b0000000000000000000124454440000111111dd111c111176776767d2d22d2200000000
24ffff7744456554654445443333333333333b0044444456344544453b00000000000000000014244444000011dd111111ccd11156567565222dd22200000000
224444f7446656545544444413444354055433b0444444505444454445b00000000000000000114444440000111111111dc111111555555122ddd2d200000000
224444ff456655144445504444454444550664004405444435444554443b000000000000000014445444000011d111dd1111111111111111dddddddd00000000
224444ff4555500444555144445554444015655b44055444544544444443b00000000000000011244444000011dd11111111ddd121211121dddddddd00000000
2211114f40515044444101444055514440555053441164445454445444443b00000000000000114444440000111dd1111111d11112212111dddddddd00000000
21111114441014465440544441150044401104434440044554554545444443b000000000000011244544000011111111111d111122122222dddddddd00000000
111111114444444555044444444054455545455344444445344544444444443b000000000000124444450000111111111111111122d222d2dddddddd00000000
33333333333333b34ff44f4f4ff44f4ff4f44ff44ff44f4f8222100000000018000000000024400045ff4fff1111111111111d26d22d2dd212d1111100000000
3b33bb333333333322232322232252222205223223225022220201100000202200000000002220004212444211111111212d6d1dd1dd666dd1d2d21200007000
33355b3333bb43b33b10311101b3313113003b1001b30031150102110120105300000000002240000111111011111111d22d6dd660d666762dd2d22d00077000
3355bb3533b5553304b00b000030b0403000030000300003021200011000002000000000002440000011200011111111d1dd7666700666756666dd1d00076700
335bbb4333bbb54305b03b30b3b0bb500b000000000000b025010000000003520000000000242000001220001111111100dd66760000767067666d0000767700
335bb533335bb5530b030003b00000b00000000000000000040553000000004000000000002240000022400011111111000dd770000007000777600000777770
33333333333b5b333003003000000b5300000000000000000020020000000030000000000022400000244000111111110000d700000000000777000006d67dd0
33b353b333333333000030000000bb3000000000000000000022050000000200000000000024200000242000111111110000070000000000007000000dd766d0
00003333333300003353333333335353353333330000000000c0000000333300000000004ff44f4f45ff4fff000000000000000000000000776776700dd6d52d
003333b33b3333003433533bb33533333333333b009707000c9c0b00033b333000000000222422224212444200000000000000000007000055656756dd66dd5d
033333533533333033a555333353533333b533330073000000c300c0333333b3000000000111111001111111000000000000070007777000215555572d66dd15
035b33333333b5303baaa5333353333333bb333300003790000b3c9c3333333300000000000000000000114400000000000076706766670011111116d2262215
3533b333333b33533ba9aa3333333330033333330097307000c030c03b33333300000000000000000000144400000000000666756666dd761212111625222511
3b335533335533b333aaa5533333333003333353000733000c9cb300333b33330012570000000000000011240000000000d666761dd2d22d1122121661151211
3b33333bb33333b3b33a45b333333300003333b30000370000c030b0033333300125675000000000000011440000000001dd666dd1d2d212222122262d115121
35533333333335533333333bb33300000000333300303000000030000000400001256650000000000000112400000000022d2dd212121111222d222d22211111
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000010000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000001776000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000070100000015776010000000000000100000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000067511001079776011000000000001000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000067977000778776001000000000117000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000067877000678766006110000001176000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000067776000067760000777600006770000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000006660000006600000066000000660000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000070070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000670076000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000d7777d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006777777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000007717717700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
076666d7777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
772d6d72d75777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77dddd776d77d6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777626770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777222d70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7777777d2d0660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
077777d2060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000808080800000002020202000000000008080808080800000040020000000000000000000000000000000200000000000000000000000000000002000010101010101010000000404010000010101010101010100000000000100000000020202020000000002000000000000000000000000000002020000000100
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
505050505050505050505050505050505050500000000000000000000000000000000000000070607261607100000d0a0a0a0a0a0a0a0a0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050504d0000000000000000000000000000000000000000000000
50505050505050505050505050cacacbcbcb50cb00cbcbcbcbcbcbcbcbcbcb000000000000007260616061720000000000000000000a0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0050504d0000000000000000000000000000000000000000000000
00000050505050505050505000cacacbcbcb50cbcbcbcbcbcbcbcbcbcbcbcb0000000000000060726072606100000000000000000000050a0000000000000000000000000000000000000000000000000000000000000000000000706060710000000000000050504d00000d6f0d000d000d00000000000000000c0c0f0c0c00
00cbcb0000505050505000cbcacacacbcbcb50cb00cbcbcb70617271cbcbcb000000006a797961606160617279796563646366006765656463660000000000000000000000000000000000000000000000000000000000000000007460727300000e0e00796450504d001d007f00001700000000000000000000000000000000
cbcbcbcb0050500000000000cbcbcbcb000050cbcbcbcb7b61726061cbcbcb00000000690000726072617260000000000000000000000000000000000d00000d000000000000000000000000000000000000000000000000000000707260710000000000000050504d5d5d5d5d5d5d5d5d5d7e00000000000000000017000000
cbcbcbcfcf0000000000cbcb00cbcbcbcb0000cf0000007b6160726100cbcb00000000690000747261606173000000000000000000000a0a0a00000000000500000000000000000000000000000000000000000000000000000000746072730000000005000050504d6d6e6e6d6d6e6c6e6e6c000000000000005d5d5d5d5d5d
0000cbcf00cbcbcb00000000cecbcbcbcb0000cf0000007b7472617300cbcb000500006900000000595a0000000000000000000000000a0a00676265797979656200000d00000d000000000000000000000000000000000000000070726071006a657979796350504d00000000000000000000000000000000006e6d6d6e6d6c
cbcbcbcb00cb00cbcb0000cb001700cb680000000000000000495a000000007979797979000000797a5a0000000000000000000000000a0a000000000000000000000000000000000000000000000000000000000000000000000074747373006900000000005050000000000000000000000000000000000000000000000000
00000000000000cb0000cb00797979cb000050000000000000595a00000000000000000000000000595a0000000000000000000000000a0a000000000000000000000000000000000000000000000000000000000000007071000000495a000069000000000062640000002f0000000000000000000000000000000000000000
00000000007b00001c000c00ce0000cb000050787600750000595a00000000000000000000000000495a0000000000000000000000000a0a0a0000000000000000656362647965640000000000000000706171000000007473000000595a00006900000000000000000000000000000000006f00000000006f00000000000000
797a796a0000000000cbcbcecb00cbcb000050434753475400494a76000000000005000000000005595a0000000000000a0a0a0a0a0a0a0a000000000000000000000000000000000000000000000e00747273000e0000495a000000495a0005690000000000000000000000000000007c7d7f7d00177c7d7f7c000000000000
cb59cb690000170000cb504b4b4b4b4b4b50505152555551474747540000007979797979797979797a5a0000000000000a0a0a0a0a0a0a0a00000000000000000000000000000000000000000000000000690000000000494a000000595a6a796579796a796550504d4d4d4d5d5d5d5d5d5d5d5d5d5d5d5d4d4d4d4d4d4d4d4d
0c590c69cb4979797950505b5c5b5c6b5b5050524546464645465544000000000e000e000e000e00595a0000000000000a0a0a0a0a0a0a0a000000000000000000000000000000006765656600007577786900070076425343570000594a6900000000690000505050504d4d4d4e5e4e5e4e5e4e4e5e4e4e4d4d4d4d4d4d4d4d
00595869cb5979797950506b6b6b6b6b6b5050464546414141414144000000000000000000000000595a79796a0000000a0a0a0a0a0a0a0a000000000000000000000000000000000000000042435343474347534353515545525700595a69000e000e690078505050504d504d4d4f4f4f4f4f4f4f4f4f4d4d4d4d4d4d4d4d4d
7a7a7950505050505050506b6b6b6b6b6b5050464141414141415544001500777875707100000000494a0000690000780a0a0a0a0a0a0a0a000000000000000000000000000000000000000056525152455546524146555246514557494a69000700006978505050505050504d4d4d4f4f4f4f4f4f4f4d4d4d4d4d4d4d4d4d4d
50505050505050505050506b6b6b6b6b6b505041414141414141515243474343475343434753434753434353474343534b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b56414641414141414141464641414155434343434343434353435050505050504d4d4d4d4f4f4f4f4f4d4d4d4d4d4d4d4d4d4d4d
__sfx__
000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000000505005050050500505005050050500505005050050400504005040050400503205032070320703208050080500805008050080500805008050080500804008040080400804008032080320802208022
011000000a0500a0500a0500a0500a0500a0500a0500a0500a0500a0500a0500a0500a0420a042080420804205050050500505005050050500505005050050500504005040050400504005032050320503205032
011000000505005050050500505005050050500505005050050400504005040050400503205032070220702208050080500805008050080500805008050080500804008040080400804008032080320802208022
01100000030500305003050030500305003050030500305003040030400304003040030320303208022080220a0500a0500a0500a0500a0500a0500a0500a0500a0400a0400a0400a0400a0420a0420a0420a042
01100000110533000014300000001162500000000001102311053000001105300000116252211311053110001105311003110031105311625000001105311033110531162511053110531162522113205131e523
011000002911527115221151d1152911527115221151d1152911527115221151d1152911527115221151d1152711524115221151d1152711524115221151d1152711524115221151d1152711524115221151d115
011000002611524115221151d1152611524115221151d1152611524115221151d1152611524115221151d1152411522115211151d1152411522115211151d1152411522115211151d1152411522115211151d115
011000001105330000143000000011625000000000011023110530000011053000001162500000110531100011053110001430000000116250000011023110331105300000110530000011625116252050311625
01100000110533000014300000001162500000000001102311053000001105300000116250000011053110001105311000143000000011625000001102311033110530000011053000002912322113205131e523
011000002902229022290222902224022240222702227022290222702224022240222702227022270222702220012200122002220022220252202220022200222202222022220222202222012220122201222012
011000002402224022240222402222022200221d0221d022200222002222022220221b0221b0221b0221b0221d02220022220221d022220222202220022200221d0221d0221d0221d0221d0121d0121d0121d012
0110000011115111001d1151d10020115201001d1151d10029115271001d1151d1002411527100131151d1001411524100201151d1002411524100201151d1002711527105201151d1002411524100201151d100
011000001611516100221152210026115261002211522100291152910022115221052611526115141151410011115111001d1151d10020115201001d1151d10029115291051d1151d10020115201001d1151d100
011000002211022110221102211020110201101d1121d1121d1121d1121d1121d1121d1121d1121d1121d112201102011020110201101d1101d1101b1121b1121b1121b1121b1121b1121b1121b1121b1121b112
011000001d1101d1101d1101d1101b1101b1101a1121a1121a1121a1121b1121b1121b1121b1121d1101d1101d1101d1101d1101d1101d1121d1121d1121d1121d1121d1121d1121d1121d1121d1121d1121d112
011000002211022110221102211020110201101d1121d1121d1121d1121d1121d1121d1121d1121d1121d112201102011020110201101d1121d11222110221102211222112221122211222112221122211222112
011000002411024110241102411022110221102411224112241122411227112271122711227112271122711229112291122911229112291122911229112291122911229112291122911229114291142911429114
01100000290222902229022290222402224022270222702229022270222402224022270222702227022270221d022200222202224022260222702229022290222c0222c0222c0222c0222c0222c0222c0222c022
011000002e0222e0252e0252e0222e0222c022290222c02229022290252902529022290222702224022270222e0222c02229022270222c0222902227022240222902227022240222202227022240222202220022
011000001d0221d0221d0221d0221d0221d0221d0221d0221d0121d0121d0121d0121d0121d0121d0121d01200000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000034000290102d010310203103031020330303204031040300302d0302d0302c0202b0202b0202a0302a04029050280402703027020270202602025020230202302021030200101f0201f0101e0101c000
00010000110200c0300e040100501305014050137501275010750107500f7500e7500d7500c7500c7500b7500a7500a7500a75009750087500675005750037500175001750017500a7000a7000a7000a7000a700
01010000290102902029030290401d0001d0001d00011000350203503035040350403504035030350303503035030350203502035020350203501035010350103500035000247002470023700237002270000000
01010000157001570016700177001770019700227001a7001d7201e7301f7401f7401f75020750217502275023750247502575025750267502774027740297200000000000000000000000000000000000000000
000400001d7101d7101d7201d7301c7301c7401c7501c7501b7501b7501b7401b7401a7401a7401a7401a74019740197401974019750197501975019750197401874018740187301872018720187201871018710
__music__
00 010c4e48
00 020d4f48
00 010c084a
00 020d0949
00 010c080e
00 020d090f
00 010c080e
00 020d050f
00 03060844
00 04070944
00 03060844
00 04070544
00 0306080a
00 0407090b
00 0306080a
00 0407050b
00 010c080e
00 020d050f
00 03060810
00 020d0511
00 0306080a
00 0407050b
00 03060812
00 04070513
