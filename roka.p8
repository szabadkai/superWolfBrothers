pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
 snd=
{
	jump=24,
	pickup=23,
	death=25
}

--music tracks
music(0)
startscreen=true
goal=nil
dead=false
win=false
waiting = false
water={}
pickups ={}

backdrop={
	{20*8	,102*8},
	{8*66,1100}
}
level=0

function trigger_death()

	sfx(snd.death,1)

	local dpal={0,1,1, 2,1,13,6,
	4,4,9,3, 13,1,13,14}
	for i=0,40 do
		for j=1,15 do
			col = j
			for k=1,((i+(j%5))/4) do
				col=dpal[col]
			end
			pal(j,col,1)
		end
		flip()
	end
	waiting = true

	cls(0)
	print("you are dead", 30, 40)
	print("press 'c' to restart", 30, 60)
end

function trigger_win()
	if level <1 then
		level +=1
		win = nil
		waiting=true

		cls(0)
		pal()
		print("level 2", 30, 40)
		print("press 'x' to continue", 30, 60)
	else
		cls(0)
		print("you won", 30, 40)
		print("score: "..p1.coins, 30, 60)

		print("press 'c' to restart", 30, 100)
		waiting=true
	end
end

--point to box intersection.
function intersects_point_box(px,py,x,y,w,h)
	if flr(px)>=flr(x) and flr(px)<flr(x+w) and
	flr(py)>=flr(y) and flr(py)<flr(y+h) then
		return true
	else
		return false
	end
end

--box to box intersection
function intersects_box_box(
	x1,y1,
	w1,h1,
	x2,y2,
	w2,h2)

	local xd=x1-x2
	local xs=w1*0.5+w2*0.5
	if abs(xd)>=xs then return false end

	local yd=y1-y2
	local ys=h1*0.5+h2*0.5
	if abs(yd)>=ys then return false end

	return true
end

--check if pushing into side tile and resolve.
--requires self.dx,self.x,self.y, and
--assumes tile flag 0 == solid
--assumes sprite size of 8x8
function collide_side(self)

	local offset=self.w/3
	for i=-(self.w/3),(self.w/3),2 do
		--if self.dx>0 then
		if fget(mget((self.x+(offset))/8,(self.y+i)/8),0) then
			self.dx=0
			self.x=(flr(((self.x+(offset))/8))*8)-(offset)
			return true
		end
		--elseif self.dx<0 then
		if fget(mget((self.x-(offset))/8,(self.y+i)/8),0) then
			self.dx=0
			self.x=(flr((self.x-(offset))/8)*8)+8+(offset)
			return true
		end
		--	end
	end
	--didn't hit a solid tile.
	return false
end

function collide_pickups(self)
		for k,p in pairs(pickups) do
			if intersects_box_box(self.x-self.w/2,self.y-self.h/2,self.w,self.h,p.x-4,p.y-4,8,8) and not p.dead then
				p1.coins +=1
				sfx(snd.pickup, 1)
				p.dead=true
			end
		end
		if goal != nil and intersects_box_box(
		self.x-self.w/2,self.y-self.h/2,self.w,self.h,goal.x-4,goal.y-4,8,8	) then
			win=true
		end
end

function collide_enemy(self)
	for k,e in pairs(enemies) do
		if intersects_box_box(
		self.x-self.w*0.45,
		self.y,
		self.w*.8,
		self.h*.5,
		e.x,e.y,e.w,e.h ) then
			if self.dy > 0 and not e.dieing then
				e:die()
				sfx(22,1)
				p1.dy= -2
				p1.djump_spent=false
			else
				if not e.dieing then
					dead=true
				end
			end
		end
	end
end

--check if pushing into floor tile and resolve.
--requires self.dx,self.x,self.y,self.grounded,self.airtime and
--assumes tile flag 0 or 1 == solid
function collide_floor(self)
	--only check for ground when falling.
	if self.dy<0 then
		return false
	end
	local landed=false
	--check for collision at multiple points along the bottom
	--of the sprite: left, center, and right.
	for i=-(self.w/3),(self.w/3),2 do
		local tile=mget((self.x+i)/8,(self.y+(self.h/2))/8)
		if fget(tile,0) or (fget(tile,1) and self.dy>=0) then
			self.dy=0
			self.y=(flr((self.y+(self.h/2))/8)*8)-(self.h/2)
			self.grounded=true
			self.airtime=0
			landed=true
		end
	end
	return landed
end

--check if pushing into roof tile and resolve.
--requires self.dy,self.x,self.y, and
--assumes tile flag 0 == solid
function collide_roof(self)
	--check for collision at multiple points along the top
	--of the sprite: left, center, and right.
	for i=-(self.w/3),(self.w/3),2 do
		if fget(mget((self.x+i)/8,(self.y)/8),0) then
			self.dy=0
			self.y=flr((self.y-(self.h/2))/8)*8+8+(self.h/2)
			self.jump_hold_time=0
		end
	end
end

--make 2d vector
function m_vec(x,y)
	local v=
	{
		x=x,
		y=y,

		--get the length of the vector
		get_length=function(self)
			return sqrt(self.x^2+self.y^2)
		end,

		--get the normal of the vector
		get_norm=function(self)
			local l = self:get_length()
			return m_vec(self.x / l, self.y / l),l;
		end,
	}
	return v
end

--square root.
function sqr(a) return a*a end

--round to the nearest whole number.
function round(a) return flr(a+0.5) end


--print string centered with
--outline.
function printc(
	str,x,y,
	col,col_bg,
	special_chars)

	local len=(#str*4)+(special_chars*3)
	local startx=x-(len/2)
	local starty=y-2
	printo(str,startx,starty,col,col_bg)
end

--objects
function m_actor(x,y,tile)
	local w={
		x=x,
		y=y,
		w=8,
		h=8,
		anims=
		{
			["stand"]=
			{
				ticks=18,
				frames={tile,tile+1},
			}
		},
		curanim="stand",
		curframe=1,
		animtick=0,
		flipx=false, -- right
		tick = 0,

		update=function(self)

			self.animtick-=1
			if self.animtick<=0 then
				self.curframe+=1
				local a=self.anims[self.curanim]
				self.animtick=a.ticks--reset timer
				if self.curframe>#a.frames then
					self.curframe=1--loop
				end
			end

		end,

		draw=function(self)
				local a=self.anims[self.curanim]
				local frame=a.frames[self.curframe]

				spr(frame,
				self.x,
				self.y,
				1,1,
				self.flipx,
				false)
		end,

	}
	return w
end
--------------------------------
-- make enemy
function m_enemy(x,y, tile)

	local e= {
		x=x,
		y=y,
		w=8,
		h=8,
		anims=
		{
			["stand"]=
			{
				ticks=18,
				frames={tile,tile+1},
			},
			["die"]={
				ticks=200,
				frames={tile+2}
			},
		},
		curanim="stand",
		curframe=1,
		animtick=0,
		flipx=false, -- right
		tick = 0,
		dieing=false,

		move=function(self)
			if self.dieing then
				return
			end
			local xo=1
			if self.flipx then
				xo=-1
			end


			local tile=mget((self.x+5*xo)/8,((self.y+7)/8)+1)
			local tile1=mget((self.x+5*xo)/8,(self.y+7)/8)


			if self.flipx then
				self.x-=1
			else
				self.x+=1
			end
			if not (fget(tile,0) or fget(tile,1) ) or fget(tile1, 0) then
				self.flipx = not self.flipx
			end


		end,

		update=function(self)

			self.animtick-=1
			if self.animtick<=0 then
				if self.dieing  then
					self.dieing = false
					self.curanim = "stand"
				end
				self.curframe+=1
				local a=self.anims[self.curanim]
				self.animtick=a.ticks--reset timer
				if self.curframe>#a.frames then
					self.curframe=1--loop
				end
			end

		end,

		draw=function(self)
			local a=self.anims[self.curanim]
			local frame=a.frames[self.curframe]

			spr(frame,
			self.x,
			self.y,
			1,1,
			self.flipx,
			false)
		end,

		die=function(self)
			self.curanim="die"
			self.dieing=true
			self.curframe=1
			self.animtick=self.anims.die.ticks
		end


	}
	return e
end




--make the player
function m_player(x,y)

	--todo: refactor with m_vec.
	local p=
	{
		x=x,
		y=y,

		dx=0,
		dy=0,

		w=16,
		h=16,

		max_dx=1,--max x speed
		max_dy=2,--max y speed

		jump_speed=-1.75,--jump veloclity
		acc=0.05,--acceleration
		dcc=0.75,--decceleration
		air_dcc=.98,--air decceleration
		grav=0.15,
		coins = 0,
		--helper for more complex
		--button press tracking.
		--todo: generalize button index.
		jump_button=
		{
			update=function(self)
				--start with assumption
				--that not a new press.
				self.is_pressed=false
				if btn(5) then
					if not self.is_down then
						self.is_pressed=true
					end
					self.is_down=true
					self.ticks_down+=1
				else
					self.is_down=false
					self.is_pressed=false
					self.ticks_down=0
				end
			end,
			--state
			is_pressed=false,--pressed this frame
			is_down=false,--currently down
			ticks_down=0,--how long down
		},

		jump_hold_time=0,--how long jump is held
		min_jump_press=5,--min time jump can be held
		max_jump_press=15,--max time jump can be held

		jump_btn_released=true,--can we jump again?
		grounded=false,--on ground
		djump_spent=false,
		airtime=0,--time since grounded

		--animation defions.
		--use with set_anim()
		anims=
		{
			["stand"]=
			{
				ticks=18,--how long is each frame shown.
				frames={1,3},--what frames are shown.
			},
			["walk"]=
			{
				ticks=5,
				frames={33,35,37,39},
			},

			["jump_start"]=
			{
				ticks=24,
				frames={41},
			},
			["jump_up"]=
			{
				ticks=8,
				frames={43},
			},
			["fall"]=
			{
				ticks=8,
				frames={45},
			},
			["slide"]=
			{
				ticks=4,
				frames={35},
			},
		},

		curanim="walk",--currently playing animation
		curframe=1,--curent frame of animation.
		animtick=0,--ticks until next frame should show.
		flipx=false,--show sprite be flipped.

		--request new animation to play.
		set_anim=function(self,anim)
			if(anim==self.curanim)return--early out.
			local a=self.anims[anim]
			self.animtick=a.ticks--ticks count down.
			self.curanim=anim
			self.curframe=1
		end,

		--call once per tick.

		update=function(self)

			--todo: kill enemies.
			--pickups
			collide_pickups(self)
			collide_enemy(self)
			--track button presses
			local bl=btn(0) --left
			local br=btn(1) --right

			--move left/right
			if bl==true then
				self.dx-=self.acc
				br=false--handle double press
			elseif br==true then
				self.dx+=self.acc
			else
				if self.grounded then
					self.dx*=self.dcc
				else
					self.dx*=self.air_dcc
				end
			end

			--limit walk speed
			self.dx=mid(-self.max_dx,self.dx,self.max_dx)

			--move in x
			self.x+=self.dx

			--hit walls
			collide_side(self)

			--jump buttons

			self.jump_button:update()

			if self.djump_spent and self.grounded then
				self.djump_spent = false
			end

			--jump is complex.
			--we allow jump if:
			--	on ground
			--	recently on ground
			--	pressed btn right before landing
			--also, jump velocity is
			--not instant. it applies over
			--multiple frames.
			if self.jump_button.is_down then
				--is player on ground recently.
				--allow for jump right after
				--walking off ledge.

				-- if self.grounded or self.airtime<5 then
				-- 	local on_ground=true
				-- elseif not self.djump_spent then
				-- 	local on_ground = true
				-- 	self.djump_spent = true
				-- else
				-- 	local on_ground = false
				-- end

				local on_ground = (self.grounded or self.airtime < 5)

				--was btn presses recently?
				--allow for pressing right before
				--hitting ground.
				local new_jump_btn=self.jump_button.ticks_down<10
				--is player continuing a jump
				--or starting a new one?
				if (not on_ground and not self.djump_spent and self.jump_button.ticks_down==1) then
					self.djump_spent = true
					on_ground = true
				end
				if self.jump_hold_time>0 or (on_ground and new_jump_btn) then
					if(self.jump_hold_time==0)sfx(snd.jump,1)--new jump snd
					self.jump_hold_time+=1
					--keep applying jump velocity
					--until max jump time.
					if self.jump_hold_time<self.max_jump_press then
						self.dy=self.jump_speed--keep going up while held
					end

				end
			else
				self.jump_hold_time=0
			end

			--move in y
			self.dy+=self.grav
			self.dy=mid(-self.max_dy,self.dy,self.max_dy)
			self.y+=self.dy

			--floor

			if not collide_floor(self) then
				if self.dy < 0 then
					self:set_anim("jump_up")
				else
					self.dy = self.dy*1.5
					self:set_anim("fall")
				end

				self.grounded=false
				self.airtime+=1

			end

			--roof
			collide_roof(self)

			--handle playing correct animation when
			--on the ground.
			if self.grounded then
				if br then
					if self.dx<0 then
						--pressing right but still moving left.
						self:set_anim("slide")
					else
						self:set_anim("walk")
					end
				elseif bl then
					if self.dx>0 then
						--pressing left but still moving right.
						self:set_anim("slide")
					else
						self:set_anim("walk")
					end
				else
					self:set_anim("stand")
				end
			end

			--flip
			if br then
				self.flipx=false
			elseif bl then
				self.flipx=true
			end

			--anim tick
			self.animtick-=1
			if self.animtick<=0 then
				self.curframe+=1
				local a=self.anims[self.curanim]
				self.animtick=a.ticks--reset timer
				if self.curframe>#a.frames then
					self.curframe=1--loop
				end
			end

		end,


		--draw the player
		draw=function(self)
			if self.x<8 then
				self.x = 8
			elseif self.x>2032 then
				self.x=2032
			end
			-- if self.y>128 then
			-- 	dead=true
			if self.y<-5 then
				self.y=-5
			end
			local a=self.anims[self.curanim]
			local frame=a.frames[self.curframe]
			spr(frame,
			self.x-(self.w/2),
			self.y-(self.h/2),
			self.w/8,self.h/8,
			self.flipx,
			false)
		end,
	}

	return p
end

--make the camera.
function m_cam(target)
	local c=
	{
		tar=target,--target to follow.
		pos=m_vec(target.x,target.y),

		--how far from center of screen target must
		--be before camera starts following.
		--allows for movement in center without camera
		--constantly moving.
		pull_threshold=16,

		--min and max positions of camera.
		--the edges of the level.
		pos_min=m_vec(64,64),
		pos_max=m_vec(960,128+64),

		shake_remaining=0,
		shake_force=0,

		update=function(self)

			self.shake_remaining=max(0,self.shake_remaining-1)

			--follow target outside of
			--pull range.
			if self:pull_max_x()<self.tar.x then
				self.pos.x+=min(self.tar.x-self:pull_max_x(),4)
			end
			if self:pull_min_x()>self.tar.x then
				self.pos.x+=min((self.tar.x-self:pull_min_x()),4)
			end
			self.pos.y = flr(self.tar.y/128)*128+64


			--lock to edge
			if(self.pos.x<self.pos_min.x)self.pos.x=self.pos_min.x
			if(self.pos.x>self.pos_max.x)self.pos.x=self.pos_max.x
			if(self.pos.y<self.pos_min.y)self.pos.y=self.pos_min.y
			if(self.pos.y>self.pos_max.y)self.pos.y=self.pos_max.y
		end,

		cam_pos=function(self)
			--calculate camera shake.
			local shk=m_vec(0,0)
			if self.shake_remaining>0 then
				shk.x=rnd(self.shake_force)-(self.shake_force/2)
				shk.y=rnd(self.shake_force)-(self.shake_force/2)
			end
			return self.pos.x-64+shk.x,self.pos.y-64+shk.y
		end,

		pull_max_x=function(self)
			return self.pos.x+self.pull_threshold
		end,

		pull_min_x=function(self)
			return self.pos.x-self.pull_threshold
		end,

		pull_max_y=function(self)
			return self.pos.y+self.pull_threshold
		end,

		pull_min_y=function(self)
			return self.pos.y-self.pull_threshold
		end,

		shake=function(self,ticks,force)
			self.shake_remaining=ticks
			self.shake_force=force
		end
	}

	return c
end

--game flow
--------------------------------

--reset the game to its initial
--state. use this instead of
--_init()
function reset()
	enemies = {}

	p1=m_player(40,50 + level*128)


	p1:set_anim("walk")
	cam=m_cam(p1)
end


function move_actors()
	for x=p1.x/8-5, p1.x/8+5 do
		for y=level*16, (level+1)*16 do
			local tile=mget(x,y)
			if fget(tile, 7) then
				mset(x,y, 0)
				add(enemies, m_enemy(x*8,y*8,tile))
			elseif fget(tile, 2) or fget(tile, 5) then
				mset(x,y, 0)
				t=m_actor(x*8,y*8,tile)
				if  fget(tile, 6) then
					goal=t
					add(water, t)
				elseif fget(tile,5) then
					add(pickups, t)
				else
					add(water, t)
				end
			end
		end
	end
	for k,e in pairs(enemies) do
		if flr(rnd(5)) ==1 then
			e:move()
		end
	end
end
--p8 functions
--------------------------------

function _init()
	reset()
end



function _update60()
	if btn(5) and btn(4) then
		run()
	elseif( dead or win )and btn(4) then
		run()
	elseif waiting then
		return
	else
		p1:update()
		cam:update()
		for k,e in pairs(enemies) do
			e:update()
		end
		for k,e in pairs(water) do
			e:update()
		end
		local tmp={}
		for k,e in pairs(pickups) do
			e:update()
			if not e.dead then
				add(tmp, e)
			end
		pickups=tmp

		end
		move_actors()
	end

end

function juggle(tilex, tiley, posy, height,offset)
	local os=offset*cam:cam_pos()
	local n=flr(os/192)

	map(tilex,tiley,n*192-os,posy,24,height)
	map(tilex,tiley,(n+1)*192-os,posy,24,height)
end

function _draw()
	if startscreen then
		cls(0)
		print("jump with 'x'", 10, 20, 9)
		print("move with  ⬅️ and ➡️", 10, 40, 9)
		print("find the puppy", 10, 60, 9)
		print("press x to start", 10, 90, 9)

		if btn(5) then
			startscreen = false
			waiting = false
		end
	elseif btn(5) and waiting and level == 1 then
		waiting=false
		reset()
	elseif win then
		trigger_win()
		return
	elseif waiting then
		return
	elseif dead then
		trigger_death()
	else
		progress=1
		--clear the screen with black
		cls(0)
		-- set the sky color: pink
		rectfill(0,0, 128, 60, 14)
		--draw mountains bg
		juggle(24,51,0, 6,progress*.1)
		-- --draw midleground
		juggle(0,57, 10,7,progress*.2)
		--draw trees
		palt(15, true)
		palt(0, false)
		juggle(0,51, 20, 6,progress*.5)
		palt()

		-- hide background when in cave
		if cam:cam_pos()< backdrop[level+1][1] then
			rectfill(0,0,backdrop[level+1][1]-cam:cam_pos(), 128, 0)
		end
		if cam:cam_pos() > backdrop[level+1][2] -128 then
			rectfill(backdrop[level+1][2]-cam:cam_pos(),0,128, 128, 0)
		end
		-- draw the level
		camera(cam:cam_pos())
		map(0,0,0,0,128,32)

		p1:draw()
		for k,e in pairs(enemies ) do
			e:draw()
		end
		for k,w in pairs(water ) do
			w:draw()
		end
		for k,w in pairs(pickups ) do
			w:draw()
		end
		--hud
		camera(0,0)
		print(p1.coins ,64,4,7,0,0)
	end
end
__gfx__
00000000000000000000000000007000000000007700000077000000000000000000000000000000000000000000000000000000033003300330033000000000
0000000067000000000000000007700000000000900900900900000000000000009f00f9009f00f90000000000cccc0000c11c00000330300303300000000000
007007006770000000000000006770000000000090099990090900900000000000ffffff00ffffff00000000001777000017710000aa99000099aa0000000000
000770006770000000000000066770000070070090098989090999900000000000f8fff800f8fff800000000001c7c000017c10009aaa990099a7a9000000000
00077000d777000000700700d77770000670076090099190900989890009009090fff2ff90fff2ff009f00f9001ccc00001cc1000aaaa990099aa7a000000000
00700700d777000006700760d77770000d7777d09999970099999190099999900ffff2f00ffffff000ffffff00111c0000c11c000aaa99900999aaa000000000
00000000277770000d7777d027777000677777700999770009997700099989890fffff000fffff0090f8fff8000000000000000000a9990000999a0000000000
00000000267770006777777026777000771771770907090009074090790991900f490f000f490f00ff94f2ff0000000000000000000a90000009a00000000000
88888888006700007717717700670000777777770000000000f7007f0000000077000000770000000000000000b030000030b000000000000070070000000000
888888880006d76d777777770006d76d6775777000f7007f00f7007f00000000b00b00b00b00000000000000003b3000003b3000007007000777777000000000
8888888800007776677577700000777676777d6000f7007f0077777700000000b00bbbb00b0b00b00000000000080000000800000777777007c77c7700000000
888888880000777776777d600000777776777d6000777777007b777b00000000b00b8b8b0b0bbbb000000000001e8000008ee00007c77c7777c77c7700000000
8888888800077777777677000007777777767700ff7b777b0077797700f7007fb00bb1b0b00b8b8b000b00b0001e8000008e100077c77c777775577700000000
8888888800077766d762d70000077766d762d700f7977977ff97787f00777777bbbbb700bbbbb1b00bbbbbb00012800000821000777557770777777000000000
888888880006d0dd066066000006d0dd06606600f77f7777f77f77f0ff7b777b0bbb77000bbb77000bbb8b8b0001000000010000077777700777777000000000
888888880006002000606000000600200060600007790f7007779790f79779770b0707000b0730b07b0bb1b00000000000000000797272707972727000000000
bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb677000000000000000000000000000006000000000000000007000000000000000700000000000000000000000000000600000000000000000000000
bbbbbbbb67700000000000006000000000000000670000000000000007760000000000000776000000070d006000000000070d00d77000000000000000000000
bbbbbbbbd77700000070d000d770000000000000d770000000000000d776000000070d00d77600000067dd00d77000000067dd00d77700000000000000000000
bbbbbbbbd7770000067dd000d777000000000000d777000000000000d77700000067dd00d777000000d77700d777000000d77700277770000000000000000000
bbbbbbbb277770000d7770002777700000070d002777700000070d002777700000d77700277770000677717027777000067771702677700000070d0000000000
bbbbbbbb2677700067771700267770000067dd00267770000067dd00267770000677717026777000067777752677700006777775006700000067dd0000000000
0000000000670000677777500067000000d777000067000000d777000067000006777775006700002267777700670000726777770006d76d00d7770000000000
000000000006d76d267777700006d76d067771700006d76d067771700006d76d226777770006d76d66d677000006d76777767700000077760677717000000000
000000000000777662677000000077762677777500007776267777750007777666d677000007777676677000000077777762d000000777772677777500000000
00000000000077777667700000077777726777770006777772677777000777777667700000077777777d67000007777777770000000777777267777700000000
0000000000077777777670000007777777767700000677767776770000077767777d670000077767d7726600000777777dd77000000777667776770000000000
0000000000077766d762d00007777766d762d00000006776d6660000000776ddd7726600000776dd00d7700007777766d002d0000007dd00d762d00000000000
000000000006d0dd066060000706d000d6770000000006777d0000000000770077dd000000007700000007000706d00000000000000070d0d677000000000000
0000000000060020006060000006000000d7700000000dd6d00000000000077d000000000000077d0000000000060000000000000000000000d7700000000000
cccccccc44444444000bbbbbbbbbbbbb444455334444454544544555bbbbbbbb000000000000122255440000000000077600000cd6666777d2d22d22dddddddd
cccccccc4444444400b3333333333533544454435454444445544454333333330000000000001224444400007600067cc7cc00c72d66667722222222dddddddd
cccccccc444444440b3345555544545445544445464455444544444453344535000000000000112444440000c7cc77cdc777c77c22dddd67222222d2dddddddd
cccccccc44444444054665554444544444544453544544464444444455445444000000000000122454440000cc777cddcddc7ccd22dddd66d2222ddddddddddd
cccccccc44444444b55651544444444445445445444445454454444444444444000000000000112554440000cddc1dd11cd11dcd22dddd66d2d22ddddddddddd
cccccccc44444444355555544444444444444545445444444445445444554444000000000000112255440000dd1111111111111c221111d6ddd2dddddddddddd
cccccccc44444444344511444544454454445445444544945444444444555444000000000005112445545000c11111111111111d2111111ddddddddddddddddd
cccccccc444444443554545544444444444444434544444444454444454444540000000055111242545544551111dcd11111111111111111dddddddddddddddd
4ffff7774444544454444454bbbbbbbbbbbbb000454444453355454400000000000000000000124454440000111111dd111c111176776767d2d22d2200000000
24ffff7744456554654445443333333333333b0044444456344544450000000000000000000014244444000011dd111111ccd11156567565222dd22200000000
224444f7446656545544444413444354055433b0444444505444454400000000000000000000114444440000111111111dc111111555555122ddd2d200000000
224444ff4566551444455044444544445506640044054444354445540000000000000000000014445444000011d111dd1111111111111111dddddddd00000000
224444ff4555500444555144445554444015655b44055444544544440000000000000000000011244444000011dd11111111ddd121211121dddddddd00000000
2211114f40515044444101444055514440555053441164445454445400000000000000000000114444440000111dd1111111d11112212111dddddddd00000000
211111144410144654405444411500444011044344400445545545450000000000000000000011244544000011111111111d111122122222dddddddd00000000
1111111144444445550444444440544555454553444444453445444400000000000000000000124444450000111111111111111122d222d2dddddddd00000000
33333333333333b34ff44f4f4ff44f4ff4f44ff44ff44f4f8222100000000018111111110024400045ff4fff1111111111111d26d22d2dd212d1111100000000
3b33bb333333333322232322232252222205223223225022220201100000202211111111002220004212444211111111212d6d1dd1dd666dd1d2d21200007000
33355b3333bb43b33b10311101b3313113003b1001b30031150102110120105311111111002240000111111011111111d22d6dd660d666762dd2d22d00077000
3355bb3533b5553304b00b000030b0403000030000300003021200011000002011111111002440000011200011111111d1dd7666700666756666dd1d00076700
335bbb4333bbb54305b03b30b3b0bb500b000000000000b025010000000003524111111100242000001220001111111100dd66760000767067666d0000767700
335bb533335bb5530b030003b00000b00000000000000000040553000000004044111111002240000022400011111111000dd770000007000777600000777770
33333333333b5b333003003000000b5300000000000000000020020000000030444111110022400000244000111111110000d700000000000777000006d67dd0
33b353b333333333000030000000bb3000000000000000000022050000000200444411110024200000242000111111110000070000000000007000000dd766d0
00003333333300003353333333335353353333330000000000c0000000333300000000004ff44f4f45ff4fff111111110000000000000000776776700dd6d52d
003333b33b3333003433533bb33533333333333b009707000c9c0b00033b333000000000222422224212444211111111000000000007000055656756dd66dd5d
033333533533333033a555333353533333b533330073000000c300c0333333b3000000000111111001111111111111110000070007777000215555572d66dd15
035b33333333b5303baaa5333353333333bb333300003790000b3c9c3333333300000000000000000000114411111111000076706766670011111116d2262215
3533b333333b33533ba9aa3333333330033333330097307000c030c03b33333300000000000000000000144411111114000666756666dd761212111625222511
3b335533335533b333aaa5533333333003333353000733000c9cb300333b33330012570000000000000011241111114400d666761dd2d22d1122121661151211
3b33333bb33333b3b33a45b333333300003333b30000370000c030b0033333300125675000000000000011441111144401dd666dd1d2d212222122262d115121
35533333333335533333333bb33300000000333300303000000030000000400001256650000000000000112411114444022d2dd212121111222d222d22211111
00000000ffffffffffffffff00000000000000000000888080000000000000000000000000000000000088808000000000000000000000000000000000000000
00000000ffffffffffffffff00000000000000000088822888822000000000000000000000800000008882288882000000000000000000000000000000000000
00000000ffffffff0fffffff00000000000200000008222282282000011100000000000000000000000821128228000000d2d000000000000000000000000000
20000002ffffffff0fffffff02000000020220000000299922882000000111000000000009a9888000001dd122880000022d0d00000000000000000000000000
20000022fffffff000ffffff00202020002222000aaa99aa9222200000001100000000000aa999000aaaddccd220000002d00000000000000000000000000000
22002222ffffff0000ffffff0222020202222020000a12b019000000000001100000000000aa9000000a12801d0000002dd00000000000000000000000000000
22022222fffff000000fffff22222022222222028088a101a90000000000011000000000000000008088c101cd0000002d000000000000000000000000000000
22222222ffff00000000ffff2222222222222220000aa9aaa9000000000001100888800000000000000a9cccc00000002d011000000000000000000000000000
eeeeeeeefffff00000000fff000000088000000000aa99a99a90000000001108888888000000000000aad1cdd0000000d1888810000000000000000000000000
eeeeeeeeffff00000000ffff000000888800000000008992aa99000000088888888888800000008000008dd2c000000d2ccccc81000000000000000000000000
eeeeeeeeffff000000000fff00000888888000000008822aaaa990000088888822222888000aa9800008822ccc00000dccd00cc1000000000000000000000000
eeeeeeeefff0000000000fff000008888880000000888299a4a499000088882229992888009a9880008882ddccc200dccd0000c1000000000000000000000000
eeeeeeeeff000000000000ff00008888888800000088229aaa4aa990088822999aa992880099880000882adaccccc21cd88800cd000000000000000000000000
eeeeeeeefff000000000000f00888888888888000000094a4aaaaa90aa222299aaaa998800080000000022adccc1cc182222808d000000000000000000000000
eeeeeeeeff00000000000fff0808888888888080000009a4aa4a4a994aa2299aa00aa9880000000000002dddccc1dcddd2c88000000000000000000000000000
eeeeeeeef00000000000000f80888888888888080000999aaaa4aaaaa4a299aa2202a9280000000000009d9d9c1ddccc11cc8000000000000000000000000000
88888888ffffffffffffffff000000000000000000009494a99aa9aaaaaa9aa12102aa0800000000000028ddc811dc1cc10cc800000000000000000000000000
888888880ffffffffffffff0000000000000000000009949a494aaa99944aa1121102a9800000000000002d8ccc1ddd1d000c800000000000000000000000000
8888888800f0ffffffff0f000000000000000000000099989a498aaaa9a4aa1112100a98000000000000002c8ccc11d10000c800000000000000000000000000
8888888800000ffffff00000000000000000000000000198899988aaaaa4a11112110a900000000000000002ddddd1100000c000000000000000000000000000
8888888800000ffffff00000000000000000000000000119889999889984aa1110010aa00000000000000000110011000000c000000000000000000000000000
88888888000000f00f00000000000000000000000000011988888919889aaa01100002a00000000000000000d200120000000000000000000000000000000000
88888888000000000000000000000000000000000000001198488888818aa000100002a0000000000000aa999a00a21100000000000000000000000000000000
88888888000000000000000000000000000000000000000111444411118a00001000028000000000000880088299a99000000000000000000000000000000000
22222222ffffffff0000000000000000000000000000000111144411180000000000020000000000000000000000000000000000000000000000000000000000
22222222ffffffff0000000000000000000000000000000010114411000000000000000000000000000000000000000000000000000000000000000000000000
22222222ffffffff0000000000000000000000000000000000400940000000000000000000000000000000000000000000000000000000000000000000000000
22222222ffffffff0000000000000000000000000000000000900940000000000000000000000000000000000000000000000000000000000000000000000000
22222222ffffffff0000000000000000000000000000000000900900000000000000000000000000000000000000000000000000000000000000000000000000
22222222ffffffff0000000000000000000000000000000000900900000000000000000000000000000000000000000000000000000000000000000000000000
22222222ffffffff0000000000000000000000000000009909900990000000000000000000000000000000000000000000000000000000000000000000000000
22222222ffffffff0000000000000000000000000000004999099999000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b0a0a0a0a0a0a0a0a49000000000000390a0a0a0a0a0a0a0a00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b1b1b1b1b1b1b1b1b1b1b1b1b1b18281b1b1b1b1b1b1b1b0a0a0a0a0a0a0a0a0a4900000000390a0a0a0a0a0a0a0a0a00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b1b1b1b1b181b1b1929182818281929281b1b1b1b1b1b1b0a0a0a0a0a0a0a0a0a0a490000390a0a0a0a0a0a0a0a0a0a00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
18281b1828191a1a192919291929192b291928182a281b1b0a0a0a0a0a0a0a0a0a0a0a49390a0a0a0a0a0a0a0a0a0a0a00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
19292a190303030303030303032b0303030329190329181a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000048380303030303030303030300004b4b4b4838083b0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000080b0b0848030303030303030300004b38380b0b0b48000000003b0000000000003b3b3b3b3b3b3b3b3b3b3b3b3b00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
48080b0b0b0b0b08000000000000000048080b0b0b0b0b0b00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b0b0b0b0b0b0b0b48380000000038080b0b0b0b0b0b0b0b00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b0b0b0b0b0b0b0b0b0b080838080b0b0b0b0b0b0b0b0b0b00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b00000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000808080808080202020200000000000008080808080802020440000000000000000000000000000000000000000000000000000000000000000000000010101010001010000000404010000010101010101010000000000000100000000020202020000000002000202020000000000000000000002020000000100
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
000000000000000000000000000000000000000000000000000000000000000000000000000070607261607100000000000000000000001b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005050504d0000000000000000000000000000000000000000000000
000000001b00001b000000000000000000000000000000000000000000000000000000000d0072606160617200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5050504d0000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000006072607260610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000706060710000000000000050504d0000006f0000000000000000000000000000000f0b0b00
00000000050000000000000000000000000000000000000070617271000000000000006a6565616061606172000000000000000067656564636600000000001b0000000000000000000000000000000000000000000000000000007460727300000e0e0b0b0b50504d001d007f7d001800000000000000000000000000000000
00006462646a79796500000000000000000000000000000061726061000000000000006900007260726172600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000707260710000000000000050504d5d5d5d5d5d5d5d5d5d7e00000000000000000018000000
000000cf0069000000000000001b0000000000cf7072710061607261000000000500006900007472616061730000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000746072730000000005000050504d6d6e6e6d6d6e6c6e6e6c000000000000005d5d5d5d5d5d
00000070716900000000000000000000000000006061600074726173000000797979797979000000595a0000000000050000000000000000006762657979796562000000000000000000000000000000000000000000000000000070726071006a657979796350506e00000000000000000000000000000000006e6d6d6e6d6c
00000061726900000000000000050000000000007472730000495a00000000000000000000000000595a0063657964647979796566000000000000000000000000000000000000000000000000000000000000000000000000000074747373006900000000005050000000000000000000000000000000000000000000000000
00000074736900000000006479797964000000000069000000595a00000000000000000000000000595a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007071000000495a000069000b0b0b006264000000000000000000000000000000000000000000000000
000000495a69000000000000ce000000000076780069770000595a000000000000000000000f0000495a0000000000000000000000000000000000000000000000656362647965640000000000000000706171000000007473000000595a000069000000000000000000006f0000000000006f00000000006f00000000000000
007500494a6977000000000000000000004243474753475400494a76000000000500000000000000595a0000000000000000000000000000000000000000000000000000000000000000000000000e00747273001b0000495a000000495a0005690000000000000000004d7f7d0000007c7d7f7d00187c7d7f7c000000000000
4743434343434743544b4b4b4b4b4b4b4b46514541415551474747540000007979797979797979797a5a000000000000000000000000000000000000706171000000000000000000657965630000000000690000000000494a000000595a6a796579796a796550504d4d4d4d5d5d5d5d5d5d5d5d5d5d5d5d4d4d4d4d4d4d4d4d
5050414141414555526b6b5b5c5b5c6b6b4646505041414645465544000000000000000000000000595a79656a000000000000000000000000000d006160610000000000000000000000000000007577786900150076425343540000594a6900001b00690000505050504d4d4d4e5e4e5e4e5e4e4e5e4e4e4d4d4d4d4d4d4d4d
5050504141414141516b6b6b6b6b6b6b6b5245505041504141414144000000000000000000000000595a1b1b690000000000000000000000000000007472730000000000000000000000000042435343474347534353515546445700595a69001b001b690078505050504d504d4d4f4f4f4f4f4f4f4f4f4d4d4d4d4d4d4d4d4d
505050504141414146686b6b6b6b6b6b7b4650505050505041415544001500777875707100000000494a0000690000780000000000000000000000000069750000000000000000000000000056525152455546524146555246515354494a69001500006978505050505050504d4d4d4f4f4f4f4f4f4f4d4d4d4d4d4d4d4d4d4d
5050505050414141414652464141414141515050505050505041515243474343475343434753434753434353474343534b4b4b4b4b4b4b4b4b424353474743544b4b4b4b4b4b4b4b4b4b4b4b56414641414141414141464641414155434343434343434343435050505050504d4d4d4d4f4f4f4f4f4d4d4d4d4d4d4d4d4d4d4d
4d4d4d4d4d4d4d4d4d6d4d4d4d6d6e6d6c6c4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d5050505050505050505050504d4d4d4d4d4d4d4d5050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4d4d4d4d4d4d4d4d00006c4d4d00000000006c6d6d6c6e6d6d6c4d4d4d4d4d4d4d4d4d4d6d6e6c6c6d4d4d4d4d4d4d4d4d4d5050505050504d4d4d6c6d6e6e6c4d4d50505050505050500000000000000000000000001b000000000000000000000000000000000000000000000000000000001b000000000000000000000000
4d4d4d4d4d4d6d6c0000004d4d000000000000000000000000006c6d6c4d4d4d4d4d4d6e00000000006c4d4d4d6e6d6e6c4d4d50504d4d4d4d4d0000000000004d4d50505050500000000000000000000000000000000000000000000000000000000d0070727271000000000000000000000000000000000000000000000000
6d4d4d4d4d4d00000000006c6d0000b2000000000000000000000000006c6d4d4d6e00000000000000004d4d4d000000006e4d4d6d6c6e6d6c6e0000000000006d4d50505050000000001b0000000000000000050000000000000000000000000000000061616160000000000000007061617100000000000005000000000000
004d4d4d6d6d30300030300000b20b0b0b3000003000000000000000000000000000000b0b00000000004d4d4d00000000006c4d000000000000000000000000006c000000000000000000000000000000797979797979796a797900000000007979797972617261000000000000006160726179790000797979797979000000
b26c6d6eb2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b26d6c6e6d6c6e0000000000000000000000000000006c6d6e00000000cfcf6d00000000000000000b00000000cf0000000000000500000000000000000000000000000069000000000000000000000060726172000000000000006172616000000000000000000000000000
0000000000003030000018003030300000b4b4b40000000000000000000000000000000000000000000000000000000000cf0000000000000000ce00000000000000000000006a79797979796a000000000000000000000069000000000000000000000061726160000000000000007461727300000000000000000000000000
0000000000000000006c6c6d6c6d6d6c6d6e00000000000000000000b30000000000004d4d00b3b3b3b3b3b3b3b3000000000000000000000000001800000000000000000000690000000000690000000000000000000000690000000000000070607100746160730000000005000000495a0070607100000000000000001d00
000000000000000000000000000000000000000000000000000000000000000000004d4d4d4d0000000000000000005d5d5d5d7e0000000000006e6c6d6e00004d4d0000000069000000000069000000000000000000000069777800000000006161600000594a00000000796a797900595a0060616100000000000079797979
00000000000000000000000b0b0b0000000000000000000d000000000000000000004d4d4d4d0000000000000000006d6c6d6d6c000000000000ce00000000004d4d50504652690000007500796a7979790000000000004247475347540000007460731b00595a007061710069000000594a0074607300000000000000000000
00000000007c7d7d00000000000000000000006f00000000000000000000000000006c4d4d6e00000000000000000000000000000000000000000000000000004d505050464646464655514646690000000000000000005655464545457071000069000000495a007472730069000000595a0000690000000000000000000000
5d5d5d5d5d5d5d4d00001800000018004d4d7d7f4d0000000000004d4d4d00000000000000000000000000000000000000000000000b007c4d4b4b4b4b4b4b4d4d505050504551465246454545690000150000000015005246460000007473760069150000595a000069000069000000495a7578690000000000000000000000
4e5e4e5e4e5e5e4d5d5d5d5d5d5d5d5d4d4d4d4d4d4b4b4b4b4b4b4d4d4d000000000000000000000b0000000000000000000018007c6f4d4d5b5c5b5c6b5b4d4d505050504545520000004545690046464141414141465146460000454547435343434754494a001569001b6900754243434343544b4b4b4b4b4b4b4b4b4b4b
4f4f4f4f4f4f4d4d5e4e4e4e5e4e5e5e4d4d4d4d4d4d5c5b5c5c4d4d4d4d4d000b00006f001800000000004d4d5d5d5d5d5d5d5d5d5d5d4d4d4d6b6b6b6b4d4d4d505050505051451b1b1b0000694646465255514141414500000000454646524545454141474753434753435343474646464646466b6b6b5c6b6b5b5c5b5b5c
4f4f4f4f4f4d4d4d4d4f4f4f4f4f4f4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d7d7c7d7c7f4d4d4d5d5d5d5d4d4d4d5e5e4e4e4e4e4d4d4d4d4d4d4d4d4d4d4d4d5050505050505050454545454555465145454652464141451b1b1b00464645524545414141414651465255464651464646464646466b6b6b6b6b6b6b6b5c5b6b
4f4f4f4f4d4d4d4d4d4d4f4f4f4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4e5e4e4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d4d50505050505050505051524646524545524545454545454141414141414141464541414141414141414141414141414141414141416b6b6b6b6b6b6b6b6b6b6b
__sfx__
000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000000505005050050500505005050050500505005050050400504005040050400503205032070320703208050080500805008050080500805008050080500804008040080400804008032080320802208022
011000000a0500a0500a0500a0500a0500a0500a0500a0500a0500a0500a0500a0500a0420a042080420804205050050500505005050050500505005050050500504005040050400504005032050320503205032
011000000505005050050500505005050050500505005050050400504005040050400503205032070220702208050080500805008050080500805008050080500804008040080400804008032080320802208022
01100000030500305003050030500305003050030500305003040030400304003040030320303208022080220a0500a0500a0500a0500a0500a0500a0500a0500a0400a0400a0400a0400a0420a0420a0420a042
01100000110533000014300000001162500000000001102311053000001105300000116252211311053110001105311003110031105311625000001105311033110531162511053110531162522113205131e523
011000002911527115221151d1152911527115221151d1152911527115221151d1152911527115221151d1152711524115221151d1152711524115221151d1152711524115221151d1152711524115221151d115
011000002611524115221151d1152611524115221151d1152611524115221151d1152611524115221151d1152411522115211151d1152411522115211151d1152411522115211151d1152411522115211151d115
011000001105330000143000000011625000000000011023110530000011053000001162500000110531100011053110001430000000116250000011023110331105300000110530000011625116252050311625
01100000110533000014300000001162500000000001102311053000001105300000116250000011053110001105311000143000000011625000001102311033110530000011053000002912322113205131e523
011000002902229022290222902224022240222702227022290222702224022240222702227022270222702220012200122002220022220252202220022200222202222022220222202222012220122201222012
011000002402224022240222402222022200221d0221d022200222002222022220221b0221b0221b0221b0221d02220022220221d022220222202220022200221d0221d0221d0221d0221d0121d0121d0121d012
0110000011115111001d1151d10020115201001d1151d10029115271001d1151d1002411527100131151d1001411524100201151d1002411524100201151d1002711527105201151d1002411524100201151d100
011000001611516100221152210026115261002211522100291152910022115221052611526115141151410011115111001d1151d10020115201001d1151d10029115291051d1151d10020115201001d1151d100
011000002211022110221102211020110201101d1121d1121d1121d1121d1121d1121d1121d1121d1121d112201102011020110201101d1101d1101b1121b1121b1121b1121b1121b1121b1121b1121b1121b112
011000001d1101d1101d1101d1101b1101b1101a1121a1121a1121a1121b1121b1121b1121b1121d1101d1101d1101d1101d1101d1101d1121d1121d1121d1121d1121d1121d1121d1121d1121d1121d1121d112
011000002211022110221102211020110201101d1121d1121d1121d1121d1121d1121d1121d1121d1121d112201102011020110201101d1121d11222110221102211222112221122211222112221122211222112
011000002411024110241102411022110221102411224112241122411227112271122711227112271122711229112291122911229112291122911229112291122911229112291122911229114291142911429114
01100000290222902229022290222402224022270222702229022270222402224022270222702227022270221d022200222202224022260222702229022290222c0222c0222c0222c0222c0222c0222c0222c022
011000002e0222e0252e0252e0222e0222c022290222c02229022290252902529022290222702224022270222e0222c02229022270222c0222902227022240222902227022240222202227022240222202220022
011000001d0221d0221d0221d0221d0221d0221d0221d0221d0121d0121d0121d0121d0121d0121d0121d01200000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000034000290102d010310203103031020330303204031040300302d0302d0302c0202b0202b0202a0302a04029050280402703027020270202602025020230202302021030200101f0201f0101e0101c000
00010000110200c0300e040100501305014050137501275010750107500f7500e7500d7500c7500c7500b7500a7500a7500a75009750087500675005750037500175001750017500a7000a7000a7000a7000a700
01010000290102902029030290401d0001d0001d00011000350203503035040350403504035030350303503035030350203502035020350203501035010350103500035000247002470023700237002270000000
01010000157001570016700177001770019700227001a7001d7201e7301f7401f7401f75020750217502275023750247502575025750267502774027740297200000000000000000000000000000000000000000
000400001d7101d7101d7201d7301c7301c7401c7501c7501b7501b7501b7401b7401a7401a7401a7401a74019740197401974019750197501975019750197401874018740187301872018720187201871018710
__music__
00 010c4e48
00 020d4f48
00 010c084a
00 020d0949
00 010c080e
00 020d090f
00 010c080e
00 020d050f
00 03060844
00 04070944
00 03060844
00 04070544
00 0306080a
00 0407090b
00 0306080a
00 0407050b
00 010c080e
00 020d050f
00 03060810
00 020d0511
00 0306080a
00 0407050b
00 03060812
00 04070513
